import telebot
import requests
from functools import wraps
from datetime import datetime, timedelta
import os
import logging
from telebot import TeleBot
import base64
from io import BytesIO

# Configuraci√≥n
BOT_TOKEN = '7280597025:AAEHXfJUoh5zcVKJSRH3XdgzbmOYeydnZPE'

# Tokens para las diferentes IPs de Render
API_TOKENS = {
    '35.160.120.126': 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpcCI6IjM1LjE2MC4xMjAuMTI2IiwicGxhdGZvcm0iOiJBUEkiLCJ1c3VhcmlvIjp7Il9pZCI6IjY4NjhiYTIwMzAyNzc4YTA5Mjc2ZDU0NSIsIm5hbWUiOiJraW5nbG90dXNwIiwicmFuZ28iOiJ1c2VyIiwic3BhbSI6MzAsImNfZXhwaXJ5IjoxNzU0Mjg1OTg4fSwiaWF0IjoxNzUzMjUwNzMxLCJleHAiOjE3NTQyMDExMzF9.yRrxcB1bXsgED99BuLPidB4YXFE8-MsoebYZDWiFG9DsRWqqwwOJ0WNZT-RinMt0eA_IKjllzGm_WHo0vLfeVQ',
    '44.233.151.27': 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpcCI6IjQ0LjIzMy4xNTEuMjciLCJwbGF0Zm9ybSI6IkFQSSIsInVzdWFyaW8iOnsiX2lkIjoiNjg2OGJhMjAzMDI3NzhhMDkyNzZkNTQ1IiwibmFtZSI6Imtpbmdsb3R1c3AiLCJyYW5nbyI6InVzZXIiLCJzcGFtIjozMCwiY19leHBpcnkiOjE3NTQyODU5ODh9LCJpYXQiOjE3NTMyNTA3NTYsImV4cCI6MTc1NDIwMTE1Nn0.BCESqMO0bFD5GEjU6uDggyKtQdYiTe5j5ERgUIn2kEk-JHZ27lzGYzJppH60vQHfL3PM_031e3EFJuAWPQxMAw', 
    '34.211.200.85': 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpcCI6IjM0LjIxMS4yMDAuODUiLCJwbGF0Zm9ybSI6IkFQSSIsInVzdWFyaW8iOnsiX2lkIjoiNjg2OGJhMjAzMDI3NzhhMDkyNzZkNTQ1IiwibmFtZSI6Imtpbmdsb3R1c3AiLCJyYW5nbyI6InVzZXIiLCJzcGFtIjozMCwiY19leHBpcnkiOjE3NTQyODU5ODh9LCJpYXQiOjE3NTMyNTA3ODYsImV4cCI6MTc1NDIwMTE4Nn0.p9DL7LwwpRjbd0mykDgjgw0Pq5qrOO-cetVVG7fi5UBKPZYqkOH9moy6UGjah8CnrKNhvfGbeTSSCFxJShNr5A'
}

# Token por defecto
API_TOKEN = API_TOKENS.get('35.160.120.126', 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpcCI6IjM1LjE2MC4xMjAuMTI2IiwicGxhdGZvcm0iOiJBUEkiLCJ1c3VhcmlvIjp7Il9pZCI6IjY4NjhiYTIwMzAyNzc4YTA5Mjc2ZDU0NSIsIm5hbWUiOiJraW5nbG90dXNwIiwicmFuZ28iOiJ1c2VyIiwic3BhbSI6MzAsImNfZXhwaXJ5IjoxNzU0Mjg1OTg4fSwiaWF0IjoxNzUzMjUwNzMxLCJleHAiOjE3NTQyMDExMzF9.yRrxcB1bXsgED99BuLPidB4YXFE8-MsoebYZDWiFG9DsRWqqwwOJ0WNZT-RinMt0eA_IKjllzGm_WHo0vLfeVQ')

API_BASE = 'https://lookfriends.xyz/api'
USUARIOS = 'usuarios.txt'
BANEADOS = 'baneados.txt'
PERMISOS_SPAM = 'permisos_spam.txt'
ADMIN_ID = 6453239779

bot = telebot.TeleBot(BOT_TOKEN)

# Sistema de Antispam
user_last_command = {}

def verificar_antispam(user_id):
    """Verifica si el usuario puede enviar un comando (120 segundos de cooldown)"""
    if user_id == ADMIN_ID:
        return True, 0
    
    ahora = datetime.now()
    
    if user_id in user_last_command:
        tiempo_transcurrido = (ahora - user_last_command[user_id]).total_seconds()
        if tiempo_transcurrido < 120:  # 120 segundos de cooldown
            return False, int(120 - tiempo_transcurrido)
    
    user_last_command[user_id] = ahora
    return True, 0

# Funciones de Usuario
def registrar_usuario(user_id, username, nombre):
    """Registra un nuevo usuario en el archivo"""
    linea = f"{user_id}|{username}|{nombre}|{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    
    usuarios_existentes = []
    if os.path.exists(USUARIOS):
        with open(USUARIOS, 'r', encoding='utf-8') as f:
            usuarios_existentes = f.readlines()
    
    usuario_existe = any(line.startswith(f"{user_id}|") for line in usuarios_existentes)
    if not usuario_existe:
        with open(USUARIOS, 'a', encoding='utf-8') as f:
            f.write(linea)
        return True
    return False

def obtener_todos_usuarios():
    """Obtiene lista de todos los usuarios registrados"""
    usuarios = []
    if os.path.exists(USUARIOS):
        with open(USUARIOS, 'r', encoding='utf-8') as f:
            for line in f:
                if '|' in line:
                    partes = line.strip().split('|')
                    if len(partes) >= 3:
                        usuarios.append({
                            'user_id': int(partes[0]),
                            'username': partes[1],
                            'nombre': partes[2],
                            'fecha_registro': partes[3] if len(partes) > 3 else 'N/A'
                        })
    return usuarios

def obtener_usuario_por_username(username):
    """Obtiene el user_id de un usuario por su username"""
    if not os.path.exists(USUARIOS):
        return None
    
    username_clean = username.lower().replace('@', '')
    
    with open(USUARIOS, 'r', encoding='utf-8') as f:
        for line in f:
            if '|' in line:
                partes = line.strip().split('|')
                if len(partes) >= 2:
                    user_username = partes[1].lower().replace('@', '')
                    if user_username == username_clean:
                        return int(partes[0])
    return None

# Funciones de Baneos
def banear_usuario(user_id, username, razon="Sin raz√≥n especificada"):
    """Banea un usuario agreg√°ndolo al archivo de baneados"""
    linea = f"{user_id}|{username}|{razon}|{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    
    if os.path.exists(BANEADOS):
        with open(BANEADOS, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith(f"{user_id}|"):
                    return False
    
    with open(BANEADOS, 'a', encoding='utf-8') as f:
        f.write(linea)
    return True

def esta_baneado(user_id):
    """Verifica si un usuario est√° baneado"""
    if not os.path.exists(BANEADOS):
        return False
    
    with open(BANEADOS, 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith(f"{user_id}|"):
                return True
    return False

def auto_registrar_usuario(message):
    """Auto-registra un usuario y env√≠a notificaciones"""
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else f"@{message.from_user.first_name}"
    nombre = message.from_user.first_name or "Usuario"
    
    if esta_baneado(user_id):
        bot.reply_to(message, "üö´ *Has sido baneado del bot.*\n\nNo puedes usar ning√∫n comando.", parse_mode='Markdown')
        return False
    
    es_nuevo = registrar_usuario(user_id, username, nombre)
    if es_nuevo:
        try:
            bot.send_message(ADMIN_ID, f"üÜï *Nuevo usuario registrado:*\nüë§ {nombre}\nüÜî {username}\nüì± ID: `{user_id}`", parse_mode='Markdown')
        except:
            pass
        
        try:
            mensaje_bienvenida = "ü§ñ BOT gratuito actualmente con un antispam de 30 segundos si quieres colaborar para quitar el antispam comunicate con @Kinglotusp"
            bot.send_message(user_id, mensaje_bienvenida)
        except:
            pass
    
    return True

# Explicador de Errores
def explicar_error_http(status_code, error_message=""):
    """Explica al usuario qu√© significa cada c√≥digo de error HTTP"""
    explicaciones = {
        400: "‚ùå **Error 400 - Solicitud Incorrecta**\nüìù Los datos enviados no son v√°lidos. Verifica que hayas ingresado correctamente el DNI, RUC o informaci√≥n solicitada.",
        
        401: "üîê **Error 401 - No Autorizado**\nüö´ El bot no tiene permisos para acceder a esta informaci√≥n. El token de acceso puede haber expirado. Contacta al administrador @Kinglotusp",
        
        403: "‚õî **Error 403 - Acceso Prohibido**\nüö® El servidor rechaz√≥ la solicitud. Posibles causas:\n‚Ä¢ Has excedido el l√≠mite de consultas\n‚Ä¢ Tu IP est√° bloqueada temporalmente\n‚Ä¢ El servicio est√° restringido",
        
        404: "üîç **Error 404 - No Encontrado**\nüìã No se encontr√≥ informaci√≥n para los datos proporcionados. Verifica que el DNI, RUC o n√∫mero sea correcto.",
        
        408: "‚è∞ **Error 408 - Tiempo Agotado**\nüêå La consulta tard√≥ demasiado tiempo. El servidor est√° sobrecargado, intenta nuevamente en unos minutos.",
        
        429: "üö¶ **Lo siento, hay muchas consultas en cola hacia la API**\n‚è∞ Si quieres que no haya esta espera, colabora dando tu limosna al admin @Kinglotusp para que compre las APIs sin tiempo de espera.",
        
        500: "üîß **Error 500 - Error del Servidor**\nüí• Problema interno del servidor. Esto no es tu culpa, intenta m√°s tarde o contacta al administrador @Kinglotusp",
        
        502: "üåê **Error 502 - Puerta de Enlace Incorrecta**\nüîó Problema de comunicaci√≥n entre servidores. Intenta nuevamente en unos minutos.",
        
        503: "üöß **Error 503 - Servicio No Disponible**\n‚ö†Ô∏è El servidor est√° temporalmente fuera de servicio por mantenimiento. Intenta m√°s tarde.",
        
        504: "‚è≥ **Error 504 - Tiempo de Espera Agotado**\nüïê El servidor tard√≥ demasiado en responder. Intenta nuevamente en unos minutos."
    }
    
    explicacion_base = explicaciones.get(status_code, f"‚ùì **Error {status_code} - Error Desconocido**\nü§î Ocurri√≥ un error inesperado. Contacta al administrador @Kinglotusp con este c√≥digo de error.")
    
    if error_message and error_message != "{}":
        return f"{explicacion_base}\n\nüîç **Detalles t√©cnicos:** {error_message}"
    else:
        return explicacion_base

# API POST con selecci√≥n autom√°tica de token
def get_current_ip():
    """Obtiene la IP p√∫blica actual"""
    try:
        response = requests.get('https://api.ipify.org', timeout=5)
        return response.text if response.status_code == 200 else None
    except:
        return None

def get_api_token():
    """Selecciona el token correcto seg√∫n la IP actual"""
    current_ip = get_current_ip()
    if current_ip and current_ip in API_TOKENS:
        return API_TOKENS[current_ip]
    return API_TOKEN  # Token por defecto

def post_api(endpoint, payload, reintentos=3):
    token = get_api_token()
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot/1.0'
    }
    
    for intento in range(reintentos):
        try:
            if intento > 0:
                import time
                time.sleep(2 ** intento)
            
            response = requests.post(
                f"{API_BASE}/{endpoint}", 
                json=payload, 
                headers=headers, 
                timeout=30,
                verify=True
            )
            
            try:
                json_response = response.json()
            except:
                if intento == reintentos - 1:
                    return response.status_code, {"error": f"La API devolvi√≥ una respuesta inv√°lida (HTTP {response.status_code}). El servidor puede estar experimentando problemas."}
                continue
                
            return response.status_code, json_response
            
        except requests.exceptions.Timeout:
            if intento == reintentos - 1:
                return 408, {"error": "La consulta tard√≥ demasiado tiempo despu√©s de varios intentos. El servidor est√° sobrecargado."}
            continue
            
        except requests.exceptions.ConnectionError as e:
            if intento == reintentos - 1:
                try:
                    import socket
                    hostname = socket.gethostname()
                    local_ip = socket.gethostbyname(hostname)
                    
                    try:
                        public_ip_response = requests.get('https://api.ipify.org', timeout=5)
                        public_ip = public_ip_response.text if public_ip_response.status_code == 200 else "No disponible"
                    except:
                        public_ip = "No disponible"
                    
                    try:
                        test_response = requests.get('https://httpbin.org/ip', timeout=5)
                        internet_status = "‚úÖ Internet OK" if test_response.status_code == 200 else "‚ùå Internet FALLO"
                    except:
                        internet_status = "‚ùå Sin acceso a internet"
                    
                    try:
                        api_test = requests.get('https://lookfriends.xyz', timeout=5)
                        api_status = f"‚úÖ API accesible (HTTP {api_test.status_code})" if api_test.status_code else "‚ùå API no accesible"
                    except Exception as api_error:
                        api_status = f"‚ùå API no accesible: {str(api_error)}"
                    
                    error_info = f"üö® *Error de Conexi√≥n API* (Intento {intento + 1}/{reintentos})\n\n" \
                                f"üìç *IP Local:* `{local_ip}`\n" \
                                f"üåê *IP P√∫blica:* `{public_ip}`\n" \
                                f"üñ•Ô∏è *Hostname:* `{hostname}`\n" \
                                f"üåê *Test Internet:* {internet_status}\n" \
                                f"üéØ *Test API:* {api_status}\n" \
                                f"‚ö†Ô∏è *Error:* {str(e)}\n" \
                                f"üéØ *Endpoint:* {API_BASE}/{endpoint}\n" \
                                f"üïê *Hora:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    
                    bot.send_message(ADMIN_ID, error_info, parse_mode='Markdown')
                except Exception as diag_error:
                    pass
                
                return 503, {"error": "No se pudo conectar con el servidor despu√©s de varios intentos. Verifica tu conexi√≥n a internet o intenta m√°s tarde."}
            continue
            
        except requests.exceptions.HTTPError as e:
            if intento == reintentos - 1:
                return 500, {"error": f"Error HTTP: {str(e)}. Problema con la comunicaci√≥n del servidor."}
            continue
            
        except Exception as e:
            if intento == reintentos - 1:
                return 500, {"error": f"Error inesperado: {str(e)}. Contacta al administrador @Kinglotusp si persiste."}
            continue
    
    return 500, {"error": "Error despu√©s de m√∫ltiples intentos. Contacta al administrador @Kinglotusp."}

# Formateador
def dict_to_readable(response):
    def format_value(v, indent=1):
        indent_str = "    " * indent
        if isinstance(v, dict):
            lines = []
            for kk, vv in v.items():
                lines.append(f"{indent_str}‚Ä¢ {kk.replace('_', ' ').title()}: {format_value(vv, indent+1)}")
            return "\n".join(lines)
        elif isinstance(v, list):
            lines = []
            for i, item in enumerate(v, 1):
                if isinstance(item, dict):
                    lines.append(f"{indent_str}‚Ä¢ Item {i}:")
                    lines.append(format_value(item, indent+1))
                else:
                    lines.append(f"{indent_str}‚Ä¢ {item}")
            return "\n".join(lines)
        else:
            return str(v)

    if isinstance(response, dict):
        lines = []
        for k, v in response.items():
            key = k.replace('_', ' ').title()
            val = format_value(v)
            if "\n" in val:
                lines.append(f"üîπ {key}:\n{val}")
            else:
                lines.append(f"üîπ {key}: {val}")
        return "\n".join(lines)

    elif isinstance(response, list):
        lines = []
        for i, item in enumerate(response, 1):
            lines.append(f"--- Item {i} ---")
            if isinstance(item, dict):
                lines.append(dict_to_readable(item))
            else:
                lines.append(str(item))
        return "\n".join(lines)

    else:
        return str(response)

def escape_markdown(text):
    """Escapa caracteres especiales de Markdown"""
    if not text:
        return ""
    special_chars = ['*', '_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

if __name__ == "__main__":
    print("ü§ñ Bot iniciado...")
    
    # Servidor HTTP para servicios que lo requieren
    import threading
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    class HealthHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            html = f'''<!DOCTYPE html>
<html>
<head>
    <title>Reniec Bot</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>Reniec Bot is Running!</h1>
    <p>Status: Active</p>
    <p>Telegram Bot: Active and Running</p>
    <p>Last Check: {current_time}</p>
</body>
</html>'''
            self.wfile.write(html.encode('utf-8'))
        
        def log_message(self, format, *args):
            pass
    
    def start_health_server():
        port = int(os.environ.get('PORT', 10000))
        try:
            server = HTTPServer(('0.0.0.0', port), HealthHandler)
            print(f"üåê Servidor HTTP iniciado en puerto {port}")
            server.serve_forever()
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo iniciar servidor HTTP: {e}")
    
    # Iniciar servidor HTTP en thread separado (solo si hay PORT definido)
    if os.environ.get('PORT'):
        health_thread = threading.Thread(target=start_health_server, daemon=True)
        health_thread.start()
    
    try:
        # Obtener informaci√≥n del servidor
        import socket
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        # Obtener IP p√∫blica
        try:
            public_ip_response = requests.get('https://api.ipify.org', timeout=10)
            public_ip = public_ip_response.text if public_ip_response.status_code == 200 else "No disponible"
        except:
            public_ip = "No disponible"
        
        print(f"üñ•Ô∏è Hostname: {hostname}")
        print(f"üìç IP Local: {local_ip}")
        print(f"üåê IP P√∫blica: {public_ip}")
        
        bot_info = bot.get_me()
        print(f"üì± Bot username: @{bot_info.username}")
        print(f"üë§ Bot name: {bot_info.first_name}")
        print("üîÑ Iniciando polling...")
        
        # Notificar al admin que el bot est√° activo con informaci√≥n del servidor
        server_info = f"‚úÖ *El bot est√° activo y listo para usar.*\n\n" \
                     f"üñ•Ô∏è *Hostname:* `{hostname}`\n" \
                     f"üìç *IP Local:* `{local_ip}`\n" \
                     f"üåê *IP P√∫blica:* `{public_ip}`\n" \
                     f"üì± *Bot:* @{bot_info.username}"
        
        bot.send_message(ADMIN_ID, server_info, parse_mode='Markdown')
        
        # Configurar para producci√≥n (m√°s robusto)
        bot.infinity_polling(
            timeout=10, 
            long_polling_timeout=5,
            none_stop=True,
            interval=0
        )
    except Exception as e:
        print(f"‚ùå Error al iniciar el bot: {e}")
        # Intentar con polling b√°sico si falla infinity_polling
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e2:
            print(f"‚ùå Error cr√≠tico: {e2}")

# COMANDOS DEL BOT

@bot.message_handler(commands=['start'])
def comando_start(message):
    if not auto_registrar_usuario(message):
        return
    
    texto = (
        f"ü§ñ *¬°Hola {message.from_user.first_name}!*\n\n"
        f"Soy un bot para consultas de informaci√≥n p√∫blica.\n\n"
        f"üìã *Comandos disponibles:*\n"
        f"üîç `/nm Nombres|Apellido1|Apellido2` ‚Üí Buscar por nombre completo\n"
        f"üßæ `/reniec 12345678` ‚Üí Datos completos RENIEC\n"
        f"üí≥ `/sbs 12345678` ‚Üí Riesgo crediticio (SBS)\n"
        f"üöó `/sunarp ABC123` ‚Üí Buscar veh√≠culo por placa\n"
        f"üíº `/sueldos 12345678` ‚Üí Buscar sueldos por DNI\n"
        f"üë®‚Äçüë©‚Äçüëß `/familia 12345678` ‚Üí Grupo familiar por DNI\n"
        f"ü™™ `/virtual_dni 12345678` ‚Üí Imagen virtual del DNI\n"
        f"üè¢ `/sunat 12345678901` ‚Üí Informaci√≥n de RUC (SUNAT)\n"
        f"üìû `/telf 987654321` ‚Üí Buscar por n√∫mero de tel√©fono\n"
        f"üì± `/fonos 12345678` ‚Üí Tel√©fonos asociados a DNI\n\n"
        f"‚è∞ *Antispam:* 2 minutos entre comandos\n"
        f"üí° *Tip:* Usa los comandos con datos reales para obtener informaci√≥n."
    )
    
    bot.reply_to(message, texto, parse_mode='Markdown')

@bot.message_handler(commands=['nm'])
def buscar_por_nombre(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /nm Nombres|ApellidoPaterno|ApellidoMaterno")
            return

        partes = " ".join(args).split('|')
        if len(partes) != 3:
            bot.reply_to(message, "‚ö†Ô∏è Formato incorrecto.\nEjemplo: /nm Karol|Huaman|Ramos")
            return

        nombres, ap_pat, ap_mat = [x.strip().upper() for x in partes]

        status, response = post_api("nombres", {
            "nombres": nombres,
            "ap_pat": ap_pat,
            "ap_mat": ap_mat
        })

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üîç Resultado:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['reniec'])
def obtener_datos_reniec(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /reniec DNI (8 d√≠gitos num√©ricos)")
            return

        dni = args[0].strip()

        if not dni.isdigit() or len(dni) != 8:
            bot.reply_to(message, "‚ö†Ô∏è El DNI debe contener exactamente 8 d√≠gitos num√©ricos.")
            return

        bot.send_chat_action(message.chat.id, 'upload_photo')
        status, response = post_api("reniec", {"dni": dni})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
            return

        if not response or not isinstance(response, list):
            bot.reply_to(message, "‚ö†Ô∏è No se encontr√≥ informaci√≥n para este DNI.")
            return

        persona = response[0]

        sexo = "Masculino" if persona.get("sexo") == "1" else "Femenino" if persona.get("sexo") == "2" else "No especificado"

        nombre_completo = f"{persona.get('nombres', '')} {persona.get('ap_pat', '')} {persona.get('ap_mat', '')}"
        
        caption = f"""üßæ *Datos RENIEC*
üë§ *Nombre:* {escape_markdown(nombre_completo)}
üÜî *DNI:* {escape_markdown(persona.get('dni', ''))}
üéÇ *Nacimiento:* {escape_markdown(persona.get('fecha_nac', ''))}
üìç *Direcci√≥n:* {escape_markdown(persona.get('direccion', ''))}
‚ößÔ∏è *G√©nero:* {escape_markdown(sexo)}
üíç *Estado Civil:* {escape_markdown(persona.get('est_civil', ''))}
üéì *Instrucci√≥n:* {escape_markdown(persona.get('gradoInstruccion', ''))}
üìß *Email:* {escape_markdown(persona.get('emailPersonal', ''))}
üë® *Padre:* {escape_markdown(persona.get('padre', ''))}
üë© *Madre:* {escape_markdown(persona.get('madre', ''))}
"""

        if persona.get('foto') and len(persona['foto']) > 50:
            try:
                img_bytes = BytesIO(base64.b64decode(persona['foto']))
                img_bytes.name = f"{dni}.png"
                bot.send_photo(message.chat.id, photo=img_bytes, caption=caption, parse_mode='Markdown')
            except Exception as e:
                try:
                    caption_plain = f"""üßæ Datos RENIEC
üë§ Nombre: {nombre_completo}
üÜî DNI: {persona.get('dni', '')}
üéÇ Nacimiento: {persona.get('fecha_nac', '')}
üìç Direcci√≥n: {persona.get('direccion', '')}
‚ößÔ∏è G√©nero: {sexo}
üíç Estado Civil: {persona.get('est_civil', '')}
üéì Instrucci√≥n: {persona.get('gradoInstruccion', '')}
üìß Email: {persona.get('emailPersonal', '')}
üë® Padre: {persona.get('padre', '')}
üë© Madre: {persona.get('madre', '')}
"""
                    bot.send_photo(message.chat.id, photo=img_bytes, caption=caption_plain)
                except Exception as e2:
                    bot.reply_to(message, f"‚ö†Ô∏è Error al mostrar foto:\n{e2}")
        else:
            bot.send_message(message.chat.id, caption, parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['sbs'])
def buscar_en_sbs(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /sbs DNI (8 d√≠gitos num√©ricos)")
            return

        dni = args[0].strip()

        if not dni.isdigit() or len(dni) != 8:
            bot.reply_to(message, "‚ö†Ô∏è El DNI debe contener exactamente 8 d√≠gitos num√©ricos.")
            return

        status, response = post_api("sbs", {"dni": dni})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üíº Resultado SBS:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['sunarp'])
def buscar_por_placa(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /sunarp PLACA (m√≠nimo 6 caracteres)")
            return

        placa = args[0].strip().upper()

        if len(placa) < 6 or not placa.isalnum():
            bot.reply_to(message, "‚ö†Ô∏è La placa debe tener al menos 6 caracteres alfanum√©ricos.")
            return

        status, response = post_api("sunarp", {"placa": placa})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üöó Resultado SUNARP:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['sueldos'])
def buscar_sueldos_por_dni(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /sueldos DNI (8 d√≠gitos num√©ricos)")
            return

        dni = args[0].strip()

        if not dni.isdigit() or len(dni) != 8:
            bot.reply_to(message, "‚ö†Ô∏è El DNI debe contener exactamente 8 d√≠gitos num√©ricos.")
            return

        status, response = post_api("sueldos", {"dni": dni})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üí∞ Resultado SUELDOS:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['familia'])
def buscar_familia_por_dni(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /familia DNI (8 d√≠gitos num√©ricos)")
            return

        dni = args[0].strip()

        if not dni.isdigit() or len(dni) != 8:
            bot.reply_to(message, "‚ö†Ô∏è El DNI debe contener exactamente 8 d√≠gitos num√©ricos.")
            return

        status, response = post_api("familia", {"dni": dni})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üë®‚Äçüë©‚Äçüëß Resultado FAMILIA:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['virtual_dni'])
def obtener_dni_virtual(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /virtual_dni DNI (8 d√≠gitos num√©ricos)")
            return

        dni = args[0].strip()

        if not dni.isdigit() or len(dni) != 8:
            bot.reply_to(message, "‚ö†Ô∏è El DNI debe contener exactamente 8 d√≠gitos num√©ricos.")
            return

        status, response = post_api("virtual_dni", {"dni": dni})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response or not all(k in response for k in ("anverso", "reverso")):
            bot.reply_to(message, "‚ö†Ô∏è No se obtuvo imagen v√°lida del DNI.")
        else:
            try:
                anverso_img = BytesIO(base64.b64decode(response['anverso']))
                reverso_img = BytesIO(base64.b64decode(response['reverso']))

                bot.send_photo(message.chat.id, photo=anverso_img, caption="ü™™ *DNI Virtual - Anverso*", parse_mode='Markdown')
                bot.send_photo(message.chat.id, photo=reverso_img, caption="üîÑ *DNI Virtual - Reverso*", parse_mode='Markdown')
            except Exception as e:
                bot.reply_to(message, f"‚ö†Ô∏è Error al procesar im√°genes:\n{e}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['sunat'])
def buscar_datos_sunat(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if not args:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /sunat RUC (11 d√≠gitos num√©ricos)")
            return

        ruc = args[0].strip()

        if not ruc.isdigit() or len(ruc) != 11:
            bot.reply_to(message, "‚ö†Ô∏è El RUC debe contener exactamente 11 d√≠gitos num√©ricos.")
            return

        status, response = post_api("sunat", {"ruc": ruc})

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            msg = (
                f"üè¢ *Datos SUNAT*\n\n"
                f"üîπ *RUC:* {response.get('ruc', '‚Äî')}\n"
                f"üîπ *Raz√≥n Social:* {response.get('razon_social', '‚Äî')}\n"
                f"üîπ *Estado:* {response.get('estado', '‚Äî')}\n"
                f"üîπ *Direcci√≥n:* {response.get('direccion', '‚Äî')}\n"
                f"üìç *Ubigeo:* {response.get('ubigeo', '‚Äî')}\n"
                f"üìå *Departamento:* {response.get('departamento', '‚Äî')}\n"
                f"üìå *Provincia:* {response.get('provincia', '‚Äî')}\n"
                f"üìå *Distrito:* {response.get('distrito', '‚Äî')}"
            )
            bot.reply_to(message, msg, parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['telf'])
def buscar_por_solo_numero(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if len(args) != 1 or not args[0].isdigit() or len(args[0]) < 7:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /telf NUMERO\nEjemplo: /telf 987654321")
            return

        numb = args[0]
        status, response = post_api("telefonos", {
            "dni": None,
            "numb": numb
        })

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üìû Resultado TELEFONO:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")

@bot.message_handler(commands=['fonos'])
def buscar_fonos_por_dni(message):
    if not auto_registrar_usuario(message):
        return
    
    puede_usar, tiempo_restante = verificar_antispam(message.from_user.id)
    if not puede_usar:
        bot.reply_to(message, f"‚è∞ Debes esperar {tiempo_restante} segundos antes de usar otro comando.")
        return
    
    try:
        args = message.text.split()[1:]
        if len(args) != 1 or not args[0].isdigit() or len(args[0]) != 8:
            bot.reply_to(message, "‚ö†Ô∏è Uso: /fonos DNI\nEjemplo: /fonos 12345678")
            return

        dni = args[0]
        status, response = post_api("telefonos", {
            "dni": dni,
            "numb": None
        })

        if status != 200:
            error_msg = response.get('error', str(response)) if isinstance(response, dict) else str(response)
            bot.reply_to(message, explicar_error_http(status, error_msg))
        elif not response:
            bot.reply_to(message, "‚ö†Ô∏è Sin resultados.")
        else:
            if isinstance(response, list):
                msg = "\n\n".join([dict_to_readable(r) for r in response])
            else:
                msg = dict_to_readable(response)
            bot.reply_to(message, f"üìû Resultado FONOS por DNI:\n\n{msg}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error interno:\n{e}")